#include <stdio.h>
#include <stdlib.h>

// Structure of binary tree,
struct node
{
    // A particular Node contains nodeData along with,
    int nodeData;

    // Pointer to Left child and Right Child
    struct node *leftChild;
    struct node *rightChild;
};

// To add New Node to the Binary Tree,
struct node *newNode(int nodeData)
{
    // Allocation of new Structure of Type Node with the help of
    // "malloc" function
    // Type Conversion is being done here because after dynamic memory allocation malloc returns the void type
    struct node *node = (struct node *)malloc(sizeof(struct node));

    // Assign the nodeData provided as a parameter to the node
    node->nodeData = nodeData;

    // Consider leftChild and rightChild child as NULL
    node->leftChild = NULL;
    node->rightChild = NULL;

    // Return the Node pointer
    return (node);
}

void postOrderDFS(struct node *node)
{
    // Base Condition to Stop Recursion
    if (node == NULL)
        return;

    postOrderDFS(node->leftChild);
    postOrderDFS(node->rightChild);
    printf("%d ", node->nodeData);
}

void inOrderDFS(struct node *node)
{
    // Base Condition to Stop Recursion
    if (node == NULL)
        return;

    inOrderDFS(node->leftChild);
    printf("%d ", node->nodeData);
    inOrderDFS(node->rightChild);
}

void preOrderDFS(struct node *node)
{
    // Base Condition to Stop Recursion
    if (node == NULL)
        return;

    printf("%d ", node->nodeData);
    preOrderDFS(node->leftChild);
    preOrderDFS(node->rightChild);
}

int main()
{
    //Create the root of the Binary Tree
    //Let's assign a value of 8 to the root
    struct node *root = newNode(8);

    //Create Left Child and assign value 7
    root->leftChild = newNode(7);

    //Create Right Child and assign value 2
    root->rightChild = newNode(2);
    
    //Create Left Child as well as Right Child of the Right Child of Root to create another subtree
    root->rightChild->leftChild = newNode(15);
    root->rightChild->rightChild = newNode(12);

    //Create Right Child of the Left Child of Root
    root->leftChild->rightChild = newNode(6);
   
    int ch;

    printf("Enter Your Choice\n");
    printf("Preorder Depth First Search: Press 1\n");
    printf("Inorder Depth First Search: Press 2\n");
    printf("Postorder Depth First Search: Press 3\n");
    printf("Choice: ");
    
    scanf("%d", &ch);
    switch (ch)
    {
    case 1:
        preOrderDFS(root);
        break;
    case 2:
        inOrderDFS(root);
        break;
    case 3:
        postOrderDFS(root);
        break;
    default:
        printf("Enter a valid choice\n");
        break;
    }
    return 0;
}
